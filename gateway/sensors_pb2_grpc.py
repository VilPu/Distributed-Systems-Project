# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import sensors_pb2 as sensors__pb2

GRPC_GENERATED_VERSION = '1.72.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sensors_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SensorManagerStub(object):
    """services


    GetSensorData = Get data from specific sensor with id
    ListSensors = Get list of all sensors
    PushReading = Push sensor reading from sensor to manager
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSensorData = channel.unary_unary(
                '/sensors.SensorManager/GetSensorData',
                request_serializer=sensors__pb2.SensorRequest.SerializeToString,
                response_deserializer=sensors__pb2.SensorReading.FromString,
                _registered_method=True)
        self.ListSensors = channel.unary_unary(
                '/sensors.SensorManager/ListSensors',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sensors__pb2.SensorsList.FromString,
                _registered_method=True)
        self.PushReading = channel.unary_unary(
                '/sensors.SensorManager/PushReading',
                request_serializer=sensors__pb2.SensorReading.SerializeToString,
                response_deserializer=sensors__pb2.Response.FromString,
                _registered_method=True)


class SensorManagerServicer(object):
    """services


    GetSensorData = Get data from specific sensor with id
    ListSensors = Get list of all sensors
    PushReading = Push sensor reading from sensor to manager
    """

    def GetSensorData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSensors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushReading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSensorData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorData,
                    request_deserializer=sensors__pb2.SensorRequest.FromString,
                    response_serializer=sensors__pb2.SensorReading.SerializeToString,
            ),
            'ListSensors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSensors,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sensors__pb2.SensorsList.SerializeToString,
            ),
            'PushReading': grpc.unary_unary_rpc_method_handler(
                    servicer.PushReading,
                    request_deserializer=sensors__pb2.SensorReading.FromString,
                    response_serializer=sensors__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sensors.SensorManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sensors.SensorManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SensorManager(object):
    """services


    GetSensorData = Get data from specific sensor with id
    ListSensors = Get list of all sensors
    PushReading = Push sensor reading from sensor to manager
    """

    @staticmethod
    def GetSensorData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.SensorManager/GetSensorData',
            sensors__pb2.SensorRequest.SerializeToString,
            sensors__pb2.SensorReading.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSensors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.SensorManager/ListSensors',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sensors__pb2.SensorsList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushReading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.SensorManager/PushReading',
            sensors__pb2.SensorReading.SerializeToString,
            sensors__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StorageServiceStub(object):
    """
    SaveReading = Save sensor reading to storage
    GetHistory = Get sensors history via sensor_id
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveReading = channel.unary_unary(
                '/sensors.StorageService/SaveReading',
                request_serializer=sensors__pb2.SensorReading.SerializeToString,
                response_deserializer=sensors__pb2.Response.FromString,
                _registered_method=True)
        self.GetHistory = channel.unary_unary(
                '/sensors.StorageService/GetHistory',
                request_serializer=sensors__pb2.SensorRequest.SerializeToString,
                response_deserializer=sensors__pb2.SensorHistory.FromString,
                _registered_method=True)


class StorageServiceServicer(object):
    """
    SaveReading = Save sensor reading to storage
    GetHistory = Get sensors history via sensor_id
    """

    def SaveReading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveReading': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveReading,
                    request_deserializer=sensors__pb2.SensorReading.FromString,
                    response_serializer=sensors__pb2.Response.SerializeToString,
            ),
            'GetHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistory,
                    request_deserializer=sensors__pb2.SensorRequest.FromString,
                    response_serializer=sensors__pb2.SensorHistory.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sensors.StorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sensors.StorageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StorageService(object):
    """
    SaveReading = Save sensor reading to storage
    GetHistory = Get sensors history via sensor_id
    """

    @staticmethod
    def SaveReading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.StorageService/SaveReading',
            sensors__pb2.SensorReading.SerializeToString,
            sensors__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.StorageService/GetHistory',
            sensors__pb2.SensorRequest.SerializeToString,
            sensors__pb2.SensorHistory.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AlertServiceStub(object):
    """
    CheckAlert = Check if sensor reading triggers alert (e.g. too high temperature)
    GetAlerts = Get all alerts
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckAlert = channel.unary_unary(
                '/sensors.AlertService/CheckAlert',
                request_serializer=sensors__pb2.SensorReading.SerializeToString,
                response_deserializer=sensors__pb2.AlertStatus.FromString,
                _registered_method=True)
        self.GetAlerts = channel.unary_unary(
                '/sensors.AlertService/GetAlerts',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sensors__pb2.AlertList.FromString,
                _registered_method=True)


class AlertServiceServicer(object):
    """
    CheckAlert = Check if sensor reading triggers alert (e.g. too high temperature)
    GetAlerts = Get all alerts
    """

    def CheckAlert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlertServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckAlert': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAlert,
                    request_deserializer=sensors__pb2.SensorReading.FromString,
                    response_serializer=sensors__pb2.AlertStatus.SerializeToString,
            ),
            'GetAlerts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlerts,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sensors__pb2.AlertList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sensors.AlertService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sensors.AlertService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AlertService(object):
    """
    CheckAlert = Check if sensor reading triggers alert (e.g. too high temperature)
    GetAlerts = Get all alerts
    """

    @staticmethod
    def CheckAlert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.AlertService/CheckAlert',
            sensors__pb2.SensorReading.SerializeToString,
            sensors__pb2.AlertStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sensors.AlertService/GetAlerts',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sensors__pb2.AlertList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
